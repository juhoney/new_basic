# 연산
# + - * / %(나머지) //(몫) **(제곱)

# 출력함수 print()

# 자료형
# 정수형 - int(intiger)
# 실수형 - float(플롯) - 소수(ex): 0.XXX...)
# 문자열 - str(string)
# 불 - bool (True, False)
# 문자 - char

# 제어문 - 조건문, 반복문, 반복문 특수함수

# 논리 연산자
# > < >= <=
# == !=
# and or not

# shift 연산자 <<, >> (이진수 상에서 값을 좌, 우로 밀 수 있음)

# a = 12
# print(a << 1) # 00001100 -> 00011000  24
# print(a >> 1) # 1100 -> 11  3

# 조건문 - if, elif, else
# if - 독립적 - 혼자 사용가능
# elif, else - 종속적 - if 필요

# if
# else

# if
# eilf

# if
# eilf
# else

# if
# eilf
# eilf
# eilf
# ...
# else


# 반복문 - for, while
# for : 반복 횟수가 정해져 있을 때, 특정값이 반복적으로 증가해야 할 때
# while : 반복을 해야하는, 또는 반복을 마쳐야 하는 조건이 있을 때

# for test in range(3,10):
#     print(test)
# for 변수명 in range(반복횟수):
# 반복코드
# for 변수명 in range(시작값, 끝값):
# 반복코드
# for 변수명 in range(시작값, 끝값, 증가값):
# 반복코드

# for 변수명 in 시퀀스 자료형:
# 반복코드

# a = 3
# while a < 10:
#     print(a)
#     a += 1


# 반복문 특수함수 - break, continue
# break : 반복문 탈출함수
# continue : 반복문 생략함수

# for i in range(10):
#     if i == 3:
#         continue
#     print(i)
#     if i == 6:
#         break



# 시퀀스 자료형
# 리스트, 튜플, 딕셔너리, 집합(set)

# 리스트 (대괄호)

# 리스트의 생성
# a = []
# b = [12,42,71,"bp2"]
# c = [["1ec",2,1],[1,1,3,"bc"],23]

# 리스트 값 추가
# a = [1,2,3,4,5]
# a.append(10)
# a.insert(2,"o")
# print(a)

# 리스트 값 수정
# a = [1,2,3,4,5]
# a[3] = 7
# print(a)

#리스트 값 삭제
# a = [1,2,3,4,5,6,7,8,9]
# del a[1] # 해당 위치 값을 삭제
# del a # 리스트 자체 삭제
# print(a)
# a.remove(4) # 없는 값이라면 에러출력
# print(a)
# b = a.pop() (맨 뒤의 값 추출)
# print(a)
# print(b)
# c = a.pop(3) # 해당 위치의 값을 추출
# print(a)
# print(c)

#튜플 (소괄호)

#튜플의 생성
# a = ()
# b = (1,5,7,2)
# c = 1,3,5,2
# d = (9,)
# e = 7,
# print(type(a))
# print(type(b))
# print(type(c))
# print(type(d))
# print(type(e))

#튜플은 값 추가, 수정, 삭제 불가능

#접근

#자체 삭제는 가능
# a = (1,2,3)
# del a
# 불변한 값

# 딕셔너리 중괄호와 콜론 {key 값: value 값}
#딕셔너리 생성
# a = {10 : 17, 4 : "red", "blue" : 10, "p" : "b"}

#딕셔너리 값 추가
# a = {10 : 17, 4 : "red", "blue" : 10, "p" : "b"}
# a[90] = "y"
# a[새로운 key값] = value값
# print(a)

#딕셔너리 값 수정
# a = {10 : 17, 4 : "red", "blue" : 10, "p" : "b"}
# a[4] = 0 # a[이미 존재하는 key값] = value값
# print(a)

#딕셔너리 값 삭제
# a = {10 : 17, 4 : "red", "blue" : 10, "p" : "b"}
# del a["blue"]
# print(a)

#집합 (중괄호)

#집합 생성
# a = {}
# b = {1,8,2,4,1,2}

#집합의 값 추가
# a = {3,7,1}
# a.add(27) #하나의 값을 추가
# print(a)
# a.update({8,1,0,9}) #여러개의 값을 한번에 추가
# (추가할 때 리스트, 튜플, 집합으로 묶어야 함(정수 나열 불가능)
# print(a)

#집합은 수정 불가능

#집합의 값 삭제 - del 사용불가
# a = {3,7,1}
# a.remove(1)
# print(a)
#-------------------------
#집합의 세가지 특성
#1. 순서가 없음
#2. 자동 정렬
#3. 값이 중복 불가
#-------------------------
# a = {3,7,8,2,4,1,1,3,3,6,5,7,7,8,8,0,9,9}
# print(a)



#시퀀스 자료형간의 형변환 list(), tuple(), dict(), set()
# a = [1,3,7,2,2] # 리스트
# b = (1,7,7,8) # 튜플
# c = {8,9,5,1} # 집합

# a_1 = tuple(a)
# a_2 = set(a)
# print(a,a_1,a_2)
# b_1 = list(b)
# b_2 = set(b)
# print(b,b_1,b_2)
# c_1 = list(c)
# c_2 = tuple(c)
# print(c, c_1,c_2)

# list(), tuple(), dict(), set()


# 값을 하나로 묶어 주는 함수: zip()
# 튜플로 변환 한다.
# a = [1,2,3,4]
# b = ['a', 'b', 'c', 'd']
# c = dict(zip(a, b))
# print(c)
